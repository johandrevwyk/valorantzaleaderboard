import discord
import asyncio
import pymysql
from PIL import Image
from io import BytesIO

# Discord bot token
TOKEN = 'MTE0OTA5MzIyNDgxNjg0MDkyNA.GgBgWn.5YJzDYUNZaEluY1Gd-MidyPTuIduunGlhOgm1E'

# Database connection settings
host = "sql9.freemysqlhosting.net"
user = "sql9644196"
password = "ww3SuUvPyE"
database = "sql9644196"
port = 3306

# Initialize the Discord client
intents = discord.Intents.default()
intents.typing = False
intents.presences = False
client = discord.Client(intents=intents)

# Function to fetch leaderboard data from the database
def fetch_leaderboard_data():
    conn = pymysql.connect(host=host, user=user, password=password, database=database, port=port)
    cursor = conn.cursor()
    
    sql = """
    SELECT name, rank, rr FROM users
    ORDER BY FIELD(rank, 'Radiant', 'Immortal 3', 'Immortal 2', 'Immortal 3', 'Ascendant 3', 'Ascendant 2', 'Ascendant 1', 'Diamond 3', 'Diamond 2', 'Diamond 1', 'Platinum 3', 'Platinum 2', 'Platinum 1', 'Gold 3', 'Gold 2', 'Gold 1', 'Silver 3', 'Silver 2', 'Silver 1', 'Bronze 3', 'Bronze 2', 'Bronze 1', 'Iron 3', 'Iron 2', 'Iron 1', 'Unranked'), rr DESC
    """
    
    cursor.execute(sql)
    leaderboard_data = cursor.fetchall()
    
    cursor.close()
    conn.close()
    
    return leaderboard_data

# Function to create a Discord embed with leaderboard data
async def create_leaderboard_embed(leaderboard_data, bot):
    embed = discord.Embed(title="Leaderboard", color=discord.Color.blue())
    
    for index, row in enumerate(leaderboard_data):
        position = index + 1
        name, rank, rr = row
        rank_emoji_url = get_rank_emoji_url(rank)
        
        # Load the emoji from URL and resize it
        emoji_image = await load_and_resize_emoji(rank_emoji_url, bot)
        
        embed.add_field(
            name=f"{emoji_image} {name}",
            value=f"Rank: {rank}\nRR: {rr}",
            inline=False
        )
    
    return embed

# Function to get the emoji URL for a given rank
def get_rank_emoji_url(rank):
    # Map ranks to the actual emoji URLs on your server
    emoji_base_url = 'https://heartbreakhotel.info/leaderboard/ranks/'  # Base URL for emoji images
    
    rank_emoji_urls = {
        'Radiant': emoji_base_url + 'Radiant_Rank.png',
        'Immortal 3': emoji_base_url + 'Immortal_3_Rank.png',
        'Immortal 2': emoji_base_url + 'Immortal_2_Rank.png',
        'Immortal 1': emoji_base_url + 'Immortal_1_Rank.png',
        'Ascendant 3': emoji_base_url + 'Ascendant_3_Rank.png',
        'Ascendant 2': emoji_base_url + 'Ascendant_2_Rank.png',
        'Ascendant 1': emoji_base_url + 'Ascendant_1_Rank.png',
        'Diamond 3': emoji_base_url + 'Diamond_3_Rank.png',
        'Diamond 2': emoji_base_url + 'Diamond_2_Rank.png',
        'Diamond 1': emoji_base_url + 'Diamond_1_Rank.png',
        'Platinum 3': emoji_base_url + 'Platinum_3_Rank.png',
        'Platinum 2': emoji_base_url + 'Platinum_2_Rank.png',
        'Platinum 1': emoji_base_url + 'Platinum_1_Rank.png',
        'Gold 3': emoji_base_url + 'Gold_3_Rank.png',
        'Gold 2': emoji_base_url + 'Gold_2_Rank.png',
        'Gold 1': emoji_base_url + 'Gold_1_Rank.png',
        'Silver 3': emoji_base_url + 'Silver_3_Rank.png',
        'Silver 2': emoji_base_url + 'Silver_2_Rank.png',
        'Silver 1': emoji_base_url + 'Silver_1_Rank.png',
        'Bronze 3': emoji_base_url + 'Bronze_3_Rank.png',
        'Bronze 2': emoji_base_url + 'Bronze_2_Rank.png',
        'Bronze 1': emoji_base_url + 'Bronze_1_Rank.png',
        'Iron 3': emoji_base_url + 'Iron_3_Rank.png',
        'Iron 2': emoji_base_url + 'Iron_2_Rank.png',
        'Iron 1': emoji_base_url + 'Iron_1_Rank.png',
        'Unranked': emoji_base_url + 'Unranked_Rank.png',
    }
    
    return rank_emoji_urls.get(rank, emoji_base_url + 'Unranked_Rank.png')  # Default to the unranked emoji URL


# Function to load and resize an emoji from a URL
async def load_and_resize_emoji(url, bot):
    response = await bot.http.get(url)
    emoji_image = Image.open(BytesIO(response))
    
    # Resize the emoji image to your desired dimensions
    emoji_image = emoji_image.resize((32, 32))
    
    # Save the resized image to a BytesIO object
    resized_image_bytes = BytesIO()
    emoji_image.save(resized_image_bytes, format='PNG')
    
    # Create a Discord File from the resized image
    emoji_file = discord.File(resized_image_bytes, filename='emoji.png')
    
    return emoji_file

# Event handler for when the bot is ready
@client.event
async def on_ready():
    print(f'Logged in as {client.user.name}')

# Command to fetch and send the leaderboard as an embed
@client.command()
async def leaderboard(ctx):
    leaderboard_data = fetch_leaderboard_data()
    leaderboard_embed = await create_leaderboard_embed(leaderboard_data, ctx.bot)
    await ctx.send(embed=leaderboard_embed)

# Start the bot
client.run(TOKEN)
